//! @file pins.h
//! @author Ferdi Stoeltie 1665045
//! @date 19-04-2016
//! @brief 

#ifndef PIN_CONFIGURE
#define PIN_CONFIGURE
#include "bmptk.h"

const unsigned int PIN_INPUT_ERROR  =   0x01;    // Error value for configuring pin as input
const unsigned int PIN_OUTPUT_ERROR =   0x02;    // Error value for configuring pin as output
const unsigned int PIN_SET_ERROR    =   0x04;    // Error value for setting pin to either HIGH or LOW
const unsigned int PIN_GET_ERROR    =   0x08;    // Error value for reading pin wheather pin is HIGH or LOW

//! @brief Contains all error bits that are set
unsigned int PIN_CONFIGURATION_ERROR = 0x00;

#define MAX_PORT    4               // Maximum number of port value that is supported (By LPC)
#define MAX_PIN     9               // Maximum number of pin value that is supported (By LPC) NOTE: <-- should be changed to 11?

#define HIGH    1                   // Value of a pin set to HIGH
#define LOW     0                   // Value of a pin set to LOW

//! @author Ferdi Stoeltie 1665045
//! @brief Function provides an easy way to configure a given pin as input
//! @param port The port number (for current LPC, ranging from 1..4)
//! @param pin The pin to configure as input
//! @warning If a port/pin configuration is given that is invalid, 
//!             it will set PIN_INPUT_ERROR bit in PIN_CONFIGURATION_ERROR
void pin_configure_as_input(int port, int pin);

//! @author Ferdi Stoeltie 1665045
//! @brief Function provides an easy way to configure a given pin as output
//! @param port The port number (for current LPC, ranging from 1..4)
//! @param pin The pin to configure as output
//! @warning If a port/pin configuration is given that is invalid, 
//!             it will set PIN_OUTPUT_ERROR bit in PIN_CONFIGURATION_ERROR
void pin_configure_as_output(int port, int pin);

//! @author Ferdi Stoeltie 1665045
//! @brief Sets pin on port to either HIGH (1), or LOW (0)
//! @param port The port number (for current LPC, ranging from 1..4)
//! @param pin The pin to configure as output
//! @param val High (1), or Low(0). for turning the pin on/off
//! @warning If a port/pin configuration is given that is invalid, 
//!             or value is invalid, 
//!             it will set PIN_SET_ERROR bit in PIN_CONFIGURATION_ERROR
void pin_set(int port, int pin, unsigned char val);

//! @author Ferdi Stoeltie 1665045
//! @brief Gets the value of the selected pin and returns whether the pin is HIGH or LOW
//! @param port The port number (for current LPC, ranging from 1..4)
//! @param pin The pin to configure as output
//! @return value of the pin in 1 (HIGH) and 0 (LOW)
//! @warning If a port/pin configuration is given that is invalid, 
//!             it will set PIN_SET_ERROR bit in PIN_GET_ERROR
unsigned char pin_get(int port, int pin);

//! @author Ferdi Stoeltie 1665045
//! @brief helper method for redundant code.
//! @param port The port number (for current LPC, ranging from 1..4)
//! @param pin The pin to configure as output
//! @return True or False in 1 and 0. If the port and pin configuration does not exist, returns False
static unsigned char is_valid_config(int port, int pin, int error);

//! @author Ferdi Stoeltie 1665045
//! @brief helper method for redundant and readible code.
//! @param port The port number (for current LPC, ranging from 1..4)
//! @return LPC_GPIO_TypeDef* a pointer to the correct data structure for easy and fast access.
static LPC_GPIO_TypeDef* get_gpio(int port);


#endif // PIN_CONFIGURE